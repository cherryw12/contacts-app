{"ast":null,"code":"var _jsxFileName = \"/Users/cherrywang/Desktop/resonate_solutions/contact-app/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Header from './Header';\nimport ContactList from './ContactList';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const contacts = [{\n    id: \"1\",\n    \"name\": \"Cherry Wang\",\n    \"email\": \"cherryw2001@hotmail.com\"\n  }, {\n    id: \"2\",\n    \"name\": \"Stevo\",\n    \"email\": \"stevo@hotmail.com\"\n  }]; // https://jsonplaceholder.typicode.com/users \n  // ^ Notice how the data is an array, the initial state (in the brackets of useState) has to match the type\n  // Ie if the api returns and object, it would be useState({}) instead\n\n  const [userData, setUserData] = useState([]); // Notice how theres an empty array, that means it runs as soon as the component is loaded\n\n  useEffect(() => {// Fetch data here\n    // After converting data to a json\n  }, []); // Pass state into the component, like how you are passing {contacts} in contactList\n  // Replace {contacts} with your api data instead of the static data you typed up\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uiContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n        contacts: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"MEi9diF6EeXMji3OmOnykM+Lnog=\");\n\n_c = App;\n; // How i would do the rest of this \n// 1. Currently you render a hard coded array with Cherry and Stevo. Fetch the data and render this instead.\n// 2. When you click on a contact card, make a blank modal show. \n// 3. Add a close button to the modal, when you click on it use the setModalVisible function to hide it by setting the state to false\n// 4. When you click on a contact card, pass the user data of that specific card to the modal\n// 5. Render the user data on the modal\n// 6. Fix responsiveness\n// 7. Make it look pretty, add hover effects \n// 8. Bonus points - add a button that lets you email the contact, make sure their website link is a hyperlink <a></a> \n// 9. Change the title of the project in index.html -> <title>React App</title>\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cherrywang/Desktop/resonate_solutions/contact-app/src/components/App.js"],"names":["Header","ContactList","useEffect","useState","App","contacts","id","userData","setUserData"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAMC,QAAQ,GAAG,CAChB;AACCC,IAAAA,EAAE,EAAE,GADL;AAEC,YAAQ,aAFT;AAGC,aAAS;AAHV,GADgB,EAMhB;AACCA,IAAAA,EAAE,EAAE,GADL;AAEC,YAAQ,OAFT;AAGC,aAAS;AAHV,GANgB,CAAjB,CADc,CAcd;AACA;AACA;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC,CAjBc,CAoBd;;AACAD,EAAAA,SAAS,CAAC,MAAM,CAEf;AAGA;AAEA,GAPQ,EAON,EAPM,CAAT,CArBc,CA8Bd;AACA;;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACC;AAAA,8BACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEG;AAAvB;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AASA;;GAzCQD,G;;KAAAA,G;AAyCR,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Header from './Header';\nimport ContactList from './ContactList';\nimport { useEffect, useState } from 'react';\n\n\n\nfunction App() {\n\tconst contacts = [\n\t\t{\n\t\t\tid: \"1\",\n\t\t\t\"name\": \"Cherry Wang\",\n\t\t\t\"email\": \"cherryw2001@hotmail.com\",\n\t\t},\n\t\t{\n\t\t\tid: \"2\",\n\t\t\t\"name\": \"Stevo\",\n\t\t\t\"email\": \"stevo@hotmail.com\",\n\t\t},\n\t];\n\n\t// https://jsonplaceholder.typicode.com/users \n\t// ^ Notice how the data is an array, the initial state (in the brackets of useState) has to match the type\n\t// Ie if the api returns and object, it would be useState({}) instead\n\tconst [userData, setUserData] = useState([])\n\n\n\t// Notice how theres an empty array, that means it runs as soon as the component is loaded\n\tuseEffect(() => {\n\n\t\t// Fetch data here\n\n\n\t\t// After converting data to a json\n\n\t}, [])\n\n\t// Pass state into the component, like how you are passing {contacts} in contactList\n\t// Replace {contacts} with your api data instead of the static data you typed up\n\treturn (\n\t\t<div className=\"uiContainer\">\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<ContactList contacts={contacts}/>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n};\n\n// How i would do the rest of this \n\n// 1. Currently you render a hard coded array with Cherry and Stevo. Fetch the data and render this instead.\n// 2. When you click on a contact card, make a blank modal show. \n// 3. Add a close button to the modal, when you click on it use the setModalVisible function to hide it by setting the state to false\n// 4. When you click on a contact card, pass the user data of that specific card to the modal\n// 5. Render the user data on the modal\n// 6. Fix responsiveness\n// 7. Make it look pretty, add hover effects \n// 8. Bonus points - add a button that lets you email the contact, make sure their website link is a hyperlink <a></a> \n// 9. Change the title of the project in index.html -> <title>React App</title>\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}