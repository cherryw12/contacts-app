{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cherry\\\\OneDrive\\\\Desktop\\\\Contacts-App\\\\contact-app\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Header from './Header';\nimport ContactList from './ContactList';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // https://jsonplaceholder.typicode.com/users \n  // ^ Notice how the data is an array, the initial state (in the brackets of useState) has to match the type\n  // Ie if the api returns and object, it would be useState({}) instead\n  const [userData, setUserData] = useState([]);\n  useEffect(() => {\n    // Fetch data here\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(json => setUserData(json)); // After converting data to a json\n  }, []); // ^^ Notice how theres an empty array, that means it runs as soon as the component is loaded\n  // Pass state into the component, like how you are passing {contacts} in contactList\n  // Replace {contacts} with your api data instead of the static data you typed up\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uiContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n        contacts: userData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"MEi9diF6EeXMji3OmOnykM+Lnog=\");\n\n_c = App;\n; // How i would do the rest of this \n// 1. Currently you render a hard coded array with Cherry and Stevo. Fetch the data and render this instead.\n// 2. When you click on a contact card, make a blank modal show. \n// 3. Add a close button to the modal, when you click on it use the setModalVisible function to hide it by setting the state to false\n// 4. When you click on a contact card, pass the user data of that specific card to the modal\n// 5. Render the user data on the modal\n// 6. Fix responsiveness\n// 7. Make it look pretty, add hover effects, find a better profile image\n// 8. Bonus points - add a button that lets you email the contact, make sure everyones website link is a hyperlink <a></a> \n// 9. Change the title of the project in index.html -> <title>React App</title>\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cherry/OneDrive/Desktop/Contacts-App/contact-app/src/components/App.js"],"names":["Header","ContactList","useEffect","useState","App","userData","setUserData","fetch","then","response","json"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEd;AACA;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEf;AACAK,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACIC,IADJ,CACSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADrB,EAEIF,IAFJ,CAESE,IAAI,IAAIJ,WAAW,CAACI,IAAD,CAF5B,EAHe,CAMf;AAEA,GARQ,EAQN,EARM,CAAT,CAPc,CAgBd;AAEA;AACA;;AACA,sBACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACC;AAAA,8BACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEL;AAAvB;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AASA;;GA7BQD,G;;KAAAA,G;AA6BR,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,GAAf","sourcesContent":["import './App.css';\r\nimport Header from './Header';\r\nimport ContactList from './ContactList';\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\t// https://jsonplaceholder.typicode.com/users \r\n\t// ^ Notice how the data is an array, the initial state (in the brackets of useState) has to match the type\r\n\t// Ie if the api returns and object, it would be useState({}) instead\r\n\tconst [userData, setUserData] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\t// Fetch data here\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n  \t\t\t.then(response => response.json())\r\n  \t\t\t.then(json => setUserData(json))\r\n\t\t// After converting data to a json\r\n\r\n\t}, [])\r\n\t// ^^ Notice how theres an empty array, that means it runs as soon as the component is loaded\r\n\r\n\t// Pass state into the component, like how you are passing {contacts} in contactList\r\n\t// Replace {contacts} with your api data instead of the static data you typed up\r\n\treturn (\r\n\t\t<div className=\"uiContainer\">\r\n\t\t\t<div>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<ContactList contacts={userData}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n};\r\n\r\n// How i would do the rest of this \r\n\r\n// 1. Currently you render a hard coded array with Cherry and Stevo. Fetch the data and render this instead.\r\n// 2. When you click on a contact card, make a blank modal show. \r\n// 3. Add a close button to the modal, when you click on it use the setModalVisible function to hide it by setting the state to false\r\n// 4. When you click on a contact card, pass the user data of that specific card to the modal\r\n// 5. Render the user data on the modal\r\n// 6. Fix responsiveness\r\n// 7. Make it look pretty, add hover effects, find a better profile image\r\n// 8. Bonus points - add a button that lets you email the contact, make sure everyones website link is a hyperlink <a></a> \r\n// 9. Change the title of the project in index.html -> <title>React App</title>\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}